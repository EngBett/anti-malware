using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Anti_Malware
{
    public partial class MainForm : Form
    {
        int count = 0, controlTimer = 0;
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;
        [DllImportAttribute("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
        [DllImportAttribute("user32.dll")]
        public static extern bool ReleaseCapture();
        public MainForm()
        {
            InitializeComponent();
            this.loadRemovableDevices();
            this.deviceOptions.Hide();
        }

        private void loadRemovableDevices()
        {
            int count = 0;
            devicesCombo.Items.Clear();
            devicesCombo.Items.Add("Select Drive");
            foreach (DriveInfo d in DriveInfo.GetDrives())
            {
                if (d.IsReady && d.DriveType == DriveType.Removable)
                {
                    devicesCombo.Items.Add(d);
                    count += 1;
                }

            }
            devicesNumber.Text = count.ToString() + " drives";
            if (devicesCombo.Items.Count < 1)
            {
                devicesNumber.Text = count.ToString() + " drives";
            }
            devicesCombo.SelectedIndex = 0;
        }

        private void progressTimer_Tick(object sender, EventArgs e)
        {
            foreach(DriveInfo d in DriveInfo.GetDrives())
            {
                if(d.Name == devicesCombo.SelectedItem.ToString())
                {
                    try
                    {
                        float driveSize = getBytes(d.TotalSize);
                        float available = getBytes(d.TotalFreeSpace);
                        float usedSpace = driveSize - available;
                        float max = (usedSpace / driveSize) * progressPanel.Width;

                        if (this.usedPanel.Width == (int)Math.Round(max))
                        {
                            usedSpaceShow.Text = "Used Space       " + Math.Round((usedSpace / driveSize) * 100, 2).ToString() + "%";
                            avSpaceShow.Text = "Available Space " + Math.Round((available / driveSize) * 100, 2).ToString() + "%";
                            this.progressTimer.Stop();
                        }
                        else
                        {
                            usedPanel.Width += 1;
                        }
                    }
                    catch (Exception)
                    {
                        this.loadRemovableDevices();
                    }
                    

                }
                else
                {
                    
                }
            }
        }

        private void close_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void minimize_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        private void devicesCombo_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
        }

        private void devicesCombo_SelectedIndexChanged(object sender, EventArgs e)
        {
            usedPanel.Width = 0;
            if (devicesCombo.SelectedIndex > 0)
            {
                isSelected.Hide();
                deviceOptions.Show();
                progressTimer.Start();
            }
            else
            {
                deviceOptions.Hide();
                isSelected.Show();
                isSelected.Text = "No Drive Selected";
            }
        }

        private void refreshDevices_Click(object sender, EventArgs e)
        {
            devicesInfo.Text = "";
            this.loadRemovableDevices();
        }
        private float getBytes(long by)
        {
            float mb = by / 1024;
            float gb = mb / 1024;
            return gb;
        }

        private void infoDel_Click(object sender, EventArgs e)
        {
            InfoDel infodel = new InfoDel();
            infodel.ShowDialog();
        }

        private void infoRem_Click(object sender, EventArgs e)
        {
            InfoRem inforem = new InfoRem();
            inforem.ShowDialog();
        }

        private void HeaderPanel_MouseDown(object sender, MouseEventArgs e)
        {
            ReleaseCapture();
            SendMessage(this.Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
        }

        private void LogoPanel_MouseDown(object sender, MouseEventArgs e)
        {
            ReleaseCapture();
            SendMessage(this.Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
        }

        private void Delete_MouseEnter(object sender, EventArgs e)
        {
            deleteBorder.BackColor = Color.FromArgb(95, 125, 92);
        }

        private void Delete_MouseLeave(object sender, EventArgs e)
        {
            deleteBorder.BackColor = Color.FromArgb(143, 188, 139);
        }

        private void refreshDevices_MouseEnter(object sender, EventArgs e)
        {
            refreshBorder.BackColor = Color.FromArgb(95, 125, 92);
        }

        private void refreshDevices_MouseLeave(object sender, EventArgs e)
        {
            refreshBorder.BackColor = Color.FromArgb(143, 188, 139);
        }

        private void infoSoftware_Click(object sender, EventArgs e)
        {
            SoftwareInfo info = new SoftwareInfo();
            info.ShowDialog();
        }

        private void Unhide_Click(object sender, EventArgs e)
        {
            string deviceName = this.devicesCombo.SelectedText;
            foreach(DriveInfo d in DriveInfo.GetDrives())
            {
                if (d.Name == deviceName)
                {
                    string newChar = deviceName.Remove(deviceName.Length-1,1);
                    StreamWriter unhideBat = new StreamWriter("unhide.bat");
                    unhideBat.WriteLine(newChar);
                    unhideBat.WriteLine("attrib -s -h *.* /s /d");
                    unhideBat.Close();
                    StreamWriter unhideVbs = new StreamWriter("unhide.vbs");
                    unhideVbs.WriteLine("CreateObject(\"Wscript.Shell\").Run \"unhide.bat\", 0, True");
                    unhideVbs.Close();
                    Process.Start("unhide.vbs");
                    delayTimer.Start();
                    
                }
            }
        }

        private void Delete_Click(object sender, EventArgs e)
        {
            wormInfolistBox.Items.Clear();
            wormInfolistBox.Items.Add("Working on it...");
            string proc = processTextBox.Text.Trim().Replace(".exe","") + ".exe";
            StreamWriter procDel = new StreamWriter("procDel.bat");
            procDel.WriteLine(":start");
            procDel.WriteLine("taskkill /IM " + proc);
            procDel.WriteLine("goto start");
            procDel.Close();
            StreamWriter procDelVbs = new StreamWriter("procDel.vbs");
            procDelVbs.WriteLine("CreateObject(\"Wscript.Shell\").Run \"procDel.bat\", 0, True");
            procDelVbs.Close();
            Process.Start("procDel.vbs");
            this.count = 0;
            this.procDelTimer.Start();

        }

        private void procDelTimer_Tick(object sender, EventArgs e)
        {
            if (this.count < 7)
            {
                if(this.count == 0)
                {
                    wormInfolistBox.Items.Add("Please wait");
                    this.count += 1;
                }
                else
                {
                    wormInfolistBox.Items.Add("...");
                    this.count += 1;
                }
            }
            else if(this.count == 7)
            {
                wormInfolistBox.ForeColor = Color.Red;
                wormInfolistBox.Items.Add("GO TO PROCESS FOLDER AND DELETE");
                wormInfolistBox.ForeColor = Color.DarkSlateGray;
                this.count += 1;
            }
            else if(this.count == 15)
            {
                wormInfolistBox.Items.Add("**Done**");
                procDelTimer.Stop();
            }
            else
            {
                this.count += 1;
            }
        }

        private void delayTimer_Tick(object sender, EventArgs e)
        {
            List<string> loading = new List<string>() { "Loading", "Loading.", "Loading..", "Loading..." };
            if(this.controlTimer < 10)
            {
                if (this.count == 4)
                {
                    this.count = 0;
                    devicesInfo.Text = loading[this.count];
                }
                else
                {
                    devicesInfo.Text = loading[this.count];
                }
                this.count += 1;
                controlTimer += 1;
            }else{
                devicesInfo.TextAlign = ContentAlignment.MiddleCenter;
                devicesInfo.Padding = new Padding(0, 0, 0, 0);
                devicesInfo.Text = "DONE: Hidden Items Unhidden";
                delayTimer.Stop();
            }
            
        }
       
    }
}
